package win.hgfdodo.stream.ml;

import com.google.protobuf.Int64Value;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import org.tensorflow.framework.*;
import tensorflow.serving.Model;
import tensorflow.serving.Predict;
import tensorflow.serving.PredictionServiceGrpc;

import java.io.InputStream;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

public class TensorflowRecogniser {
  private final static long DEFAULT_MODEL_VERSION = 0L;
  public final static int IMAGE_FEATURE_SIZE = 28 * 28;
  private final String servingTarget;
  private final String modelName;
  private final String signatureName;

  private final long version = DEFAULT_MODEL_VERSION;

  private final Model.ModelSpec modelSpec;

  private final ManagedChannel channel;

  public TensorflowRecogniser(String servingTarget, String modelName, String signatureName, long version) {
    this.servingTarget = servingTarget;
    this.modelName = modelName;
    this.signatureName = signatureName;
    this.channel = ManagedChannelBuilder.forTarget(this.servingTarget)
        // Channels are secure by default (via SSL/TLS). For the example we disable TLS to
        // avoid needing certificates.
        .usePlaintext().build();

    modelSpec = Model.ModelSpec.newBuilder()
        .setName(this.modelName)
        .setSignatureName(this.signatureName)
        .setVersion(Int64Value.newBuilder().setValue(version))
        .build();
  }

  public void classify(int batchSize) {
    // 输入tensor的维度信息
    TensorShapeProto tensorShape = TensorShapeProto.newBuilder()
        .addDim(TensorShapeProto.Dim.newBuilder().setSize(batchSize).build())
        .addDim(TensorShapeProto.Dim.newBuilder().setSize(IMAGE_FEATURE_SIZE).build())
        .build();

    // 构造输入tensor
// 将图片转为28*28 的矩阵
    Float[] inputs = {

    };
    TensorProto tensor = TensorProto.newBuilder()
        .setDtype(DataType.DT_FLOAT)
        .setTensorShape(tensorShape)
        .addAllFloatVal(Arrays.asList(inputs))
        .build();

    //构造gRPC request
    Predict.PredictRequest request = Predict.PredictRequest.newBuilder()
        .setModelSpec(this.modelSpec)
        .putInputs("images", tensor)
        .build();

    // 发送gRPC请求
    PredictionServiceGrpc.PredictionServiceBlockingStub stub = PredictionServiceGrpc.newBlockingStub(channel);
    try {
      Predict.PredictResponse response = stub.predict(request);
      System.out.println(response);
      channel.shutdownNow().awaitTermination(5, TimeUnit.SECONDS);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }

  }
}
