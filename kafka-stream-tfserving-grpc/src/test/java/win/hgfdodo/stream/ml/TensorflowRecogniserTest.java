package win.hgfdodo.stream.ml;

import org.junit.jupiter.api.Test;
import org.tensorflow.framework.DataType;
import org.tensorflow.framework.TensorProto;
import org.tensorflow.framework.TensorProtos;
import org.tensorflow.framework.TensorShapeProto;

import java.io.IOException;
import java.util.Arrays;

import static win.hgfdodo.stream.ml.TensorflowRecogniser.IMAGE_FEATURE_SIZE;

class TensorflowRecogniserTest {

  @Test
  void classify() throws IOException {
    TensorflowRecogniser recogniser = new TensorflowRecogniser("localhost:9000", "mnist", "predict_images", 1L);
    recogniser.classify(1);
  }

  @Test
  void tensor(){
    int batchSize=1;

    // 输入tensor的维度信息
    TensorShapeProto tensorShape = TensorShapeProto.newBuilder()
        .addDim(TensorShapeProto.Dim.newBuilder().setName("batch").setSize(batchSize).build())
        .addDim(TensorShapeProto.Dim.newBuilder().setName("image").setSize(IMAGE_FEATURE_SIZE).build())
        .build();

    // 构造输入tensor
// 将图片转为28*28 的矩阵
    Float[] inputs = {

    };
    TensorProto tensor = TensorProto.newBuilder()
        .setDtype(DataType.DT_FLOAT)
        .setTensorShape(tensorShape)
        .addAllFloatVal(Arrays.asList(inputs))
        .build();

    System.out.println(tensor.getFloatValCount());
    System.out.println(tensor.getFloatValList());
    System.out.println(tensor);
  }
}